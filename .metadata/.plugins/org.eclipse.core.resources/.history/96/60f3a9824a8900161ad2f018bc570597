import java.util.*;

import javax.swing.border.EmptyBorder; 

public class Tree {
	private Node root;
	
// 	---------------------------------------------
	//constructor
	public Tree(){
		this.root=null;
	}
// 	---------------------------------------------
	//get root
	public Node getRoot() {
		return this.root;
	}
// 	---------------------------------------------
	//set root
	public void setRoot(Node newRoot) {
		this.root=newRoot;
	}
// 	---------------------------------------------
	//is tree empty
	public boolean isEmpty() {
		return (root==null);
	}
// 	---------------------------------------------
	//find
	public Node findBySalary(int salary){
		if(this.isEmpty())
			return null;
		Node current=root;
		int currentSalary;
		while( (currentSalary=current.getEmployee().getSalary()) != salary){
			current = (salary<currentSalary) ? current.getLeftChild() :
											   current.getRightChild();
			if(current==null)
				return null;
	
		}
		return current;
	}
// 	---------------------------------------------
	//find by name
	//traverse
// 	---------------------------------------------
	//insert
	public void insert(Employee employee) {
		Node newNode = new Node(employee);
		if(this.isEmpty()){
			this.setRoot(newNode);
			return;
		}

		Node current=this.getRoot();
		Node parent;
		while(true){
			parent=current;
			if(employee.getSalary()<current.getEmployee().getSalary()){
				current=current.getLeftChild();
				if(current==null){
					parent.setLeftChild(newNode);
					return;
				}
			}
			else{
				current=current.getRightChild();
				if(current==null){
					parent.setRightChild(newNode);
					return;
				}
			}		 
		}//while
	}
// 	---------------------------------------------
	//delete
	public Node deleteBySalary(int salary) {
		if(this.isEmpty())
			return null;
		Node current=this.getRoot();
		Node parent=this.getRoot();
		/*boolean isLeftChild=true;*/
		int currentSalary;
		while( (currentSalary=current.getEmployee().getSalary()) != salary){
			parent=current;
			if(salary<currentSalary){
				current=current.getLeftChild();
				/*isLeftChild=true;*/
			}
			else{
				current=current.getRightChild();
				/*isLeftChild=false;*/
			}
			if(current==null)
				return null;				//didn't find it
		}
		
		//found it - current for deletion
		
		//found is a leaf
		if(current.getLeftChild()==null && current.getRightChild()==null){
			if(current==this.getRoot())
				this.setRoot(null);
			else if(/*isLeftChild*/current==parent.getLeftChild())
				parent.setLeftChild(null);
			else if(/*!isLeftChild*/current==parent.getRightChild())
				parent.setRightChild(null);
		}
		
		//found has 1 left child
		else if(current.getRightChild() == null){
			if(current==this.getRoot())
				this.setRoot(current.getLeftChild());
			else if(current==parent.getLeftChild())
				parent.setLeftChild(current.getLeftChild());
			else if(current==parent.getRightChild())
				parent.setRightChild(current.getLeftChild());
		}
		
		//found has 1 right child
		else if(current.getLeftChild()==null){
			if(current==this.getRoot())
				this.setRoot(current.getRightChild());
			else if(current==parent.getLeftChild())
				parent.setLeftChild(current.getRightChild());
			else if(current==parent.getRightChild())
				parent.setRightChild(current.getRightChild());
		}
		
		//found has bout children
		else{
			
		}
		
		return current;
	}
// 	---------------------------------------------
	//get successor
	public Node getSuccessor(Node fromNode) {
		if(this.isEmpty() || fromNode.getRightChild()==null)
			return null;
		
		Node successorParent=fromNode;
		Node successor=fromNode.getRightChild();
		while(successor.getLeftChild() != null){
			successorParent=successor;
			successor=successor.getLeftChild();
		}
		return successor;
	}
// 	---------------------------------------------
	//get min by salary
	public Node getMinNodeBySalary() {
		if(this.isEmpty())
			return null;
		Node current = this.getRoot();
		while(current.getLeftChild() != null)
			current=current.getLeftChild();
		return current;
	}
// 	---------------------------------------------
	//get max by salary
	public Node getMaxNodeBySalary() {
		if(this.isEmpty())
			return null;
		Node current=this.getRoot();
		while(current.getRightChild() != null)
			current=current.getRightChild();
		return current;
	}
// 	---------------------------------------------
	//traverse inorder
	public void inOrderTraverse(Node localRoot) {
		if(localRoot != null){
			inOrderTraverse(localRoot.getLeftChild());
			System.out.println("\t" + localRoot.getEmployee());
			inOrderTraverse(localRoot.getRightChild());
		}
	}
// 	---------------------------------------------
	//traverse preorder 
	public void preOrderTraverse(Node localRoot) {
		if(localRoot != null){
			System.out.println("\t" + localRoot.getEmployee());
			preOrderTraverse(localRoot.getLeftChild());
			preOrderTraverse(localRoot.getRightChild());
		}
	}
// 	---------------------------------------------
	//traverse postorder
	public void postOrderTraverse(Node localRoot) {
		if(localRoot != null){
			postOrderTraverse(localRoot.getLeftChild());
			postOrderTraverse(localRoot.getRightChild());
			System.out.println("\t" + localRoot.getEmployee());
		}
	}
	
// 	---------------------------------------------
	//display tree
	public void displayTree()
      {
      Stack<Node> globalStack = new Stack<>();
      globalStack.push(root);
      int nBlanks = 32;
      boolean isRowEmpty = false;
      System.out.println(
      "......................................................");
      while(isRowEmpty==false)
         {
         Stack<Node> localStack = new Stack<>();
         isRowEmpty = true;

         for(int j=0; j<nBlanks; j++)
            System.out.print(' ');

         while(globalStack.isEmpty()==false)
            {
            Node temp = globalStack.pop();
            if(temp != null)
               {
               System.out.print(temp.getEmployee());
               localStack.push(temp.getLeftChild());
               localStack.push(temp.getRightChild());

               if(temp.getLeftChild() != null ||
                                   temp.getRightChild() != null)
                  isRowEmpty = false;
               }
            else
               {
               System.out.print("--");
               localStack.push(null);
               localStack.push(null);
               }
            for(int j=0; j<nBlanks*2-2; j++)
               System.out.print(' ');
            }  // end while globalStack not empty
         System.out.println();
         nBlanks /= 2;
         while(localStack.isEmpty()==false)
            globalStack.push( localStack.pop() );
         }  // end while isRowEmpty is false
      System.out.println(
      "......................................................");
      } 
//	 	---------------------------------------------
	
	
	public static void main(String args[]) {
		Tree tree=new Tree();
		
		tree.insert(new Employee("Uros", 240));
		tree.insert(new Employee("Marko", 780));
		tree.insert(new Employee("Jovan", 325));
		tree.insert(new Employee("Petar", 441));
		tree.insert(new Employee("Blagoje", 150));
		tree.insert(new Employee("Slavko", 680));
		tree.insert(new Employee("Ana", 470));
		tree.insert(new Employee("Jovana", 900));
		
		tree.displayTree();
		System.out.println("Find 470: " + tree.findBySalary(470));
		System.out.println("Find 690: " + tree.findBySalary(690));
		System.out.println("Find 680: " + tree.findBySalary(680));
		System.out.println("Find 441: " + tree.findBySalary(441));
		
		System.out.println("InOrder Traverse: ");
		tree.inOrderTraverse(tree.getRoot());
		System.out.println();
		
		System.out.println("PreOrder Traverse: ");
		tree.preOrderTraverse(tree.getRoot());
		System.out.println();
		
		System.out.println("PostOrder Traverse: ");
		tree.postOrderTraverse(tree.getRoot());
		System.out.println();
		
		//delete leaf
		System.out.println("Delete 331: " + tree.deleteBySalary(331));
		System.out.println("Delete 470: " + tree.deleteBySalary(470).getEmployee());
		tree.displayTree();
		
		//find min & max
		System.out.println("Min: " + tree.getMinNodeBySalary());
		System.out.println("Max: " + tree.getMaxNodeBySalary());
		
		//successor
		System.out.println("Sucessor of 240: " + 
							tree.getSuccessor(tree.findBySalary(240)));
		System.out.println("Sucessor of 150: " + 
							tree.getSuccessor(tree.findBySalary(150)));
	}
	
	
	
}
